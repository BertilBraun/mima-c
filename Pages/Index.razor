@page "/"
@inject IJSRuntime JS

<h1>Hello, world!</h1>

Welcome to the MiMa Compiler!

<meta name="generator" content="Org mode" />
<meta name="author" content="Felix Mühlenberend" />
<style type="text/css">
    <!-- /*--><![CDATA[/*><!--*/
    .title {
        text-align: center;
        margin-bottom: .2em;
    }

    .subtitle {
        text-align: center;
        font-size: medium;
        font-weight: bold;
        margin-top: 0;
    }

    .todo {
        font-family: monospace;
        color: red;
    }

    .done {
        font-family: monospace;
        color: green;
    }

    .priority {
        font-family: monospace;
        color: orange;
    }

    .tag {
        background-color: #eee;
        font-family: monospace;
        padding: 2px;
        font-size: 80%;
        font-weight: normal;
    }

    .timestamp {
        color: #bebebe;
    }

    .timestamp-kwd {
        color: #5f9ea0;
    }

    .org-right {
        margin-left: auto;
        margin-right: 0px;
        text-align: right;
    }

    .org-left {
        margin-left: 0px;
        margin-right: auto;
        text-align: left;
    }

    .org-center {
        margin-left: auto;
        margin-right: auto;
        text-align: center;
    }

    .underline {
        text-decoration: underline;
    }

    #postamble p, #preamble p {
        font-size: 90%;
        margin: .2em;
    }

    p.verse {
        margin-left: 3%;
    }

    pre {
        border: 1px solid #ccc;
        box-shadow: 3px 3px 3px #eee;
        padding: 8pt;
        font-family: monospace;
        overflow: auto;
        margin: 1.2em;
    }

        pre.src {
            position: relative;
            overflow: auto;
            padding-top: 1.2em;
        }

            pre.src:before {
                display: none;
                position: absolute;
                background-color: white;
                top: -10px;
                right: 10px;
                padding: 3px;
                border: 1px solid black;
            }

            pre.src:hover:before {
                display: inline;
                margin-top: 14px;
            }
        /* Languages per Org manual */
        pre.src-asymptote:before {
            content: 'Asymptote';
        }

        pre.src-awk:before {
            content: 'Awk';
        }

        pre.src-C:before {
            content: 'C';
        }
        /* pre.src-C++ doesn't work in CSS */
        pre.src-clojure:before {
            content: 'Clojure';
        }

        pre.src-css:before {
            content: 'CSS';
        }

        pre.src-D:before {
            content: 'D';
        }

        pre.src-ditaa:before {
            content: 'ditaa';
        }

        pre.src-dot:before {
            content: 'Graphviz';
        }

        pre.src-calc:before {
            content: 'Emacs Calc';
        }

        pre.src-emacs-lisp:before {
            content: 'Emacs Lisp';
        }

        pre.src-fortran:before {
            content: 'Fortran';
        }

        pre.src-gnuplot:before {
            content: 'gnuplot';
        }

        pre.src-haskell:before {
            content: 'Haskell';
        }

        pre.src-hledger:before {
            content: 'hledger';
        }

        pre.src-java:before {
            content: 'Java';
        }

        pre.src-js:before {
            content: 'Javascript';
        }

        pre.src-latex:before {
            content: 'LaTeX';
        }

        pre.src-ledger:before {
            content: 'Ledger';
        }

        pre.src-lisp:before {
            content: 'Lisp';
        }

        pre.src-lilypond:before {
            content: 'Lilypond';
        }

        pre.src-lua:before {
            content: 'Lua';
        }

        pre.src-matlab:before {
            content: 'MATLAB';
        }

        pre.src-mscgen:before {
            content: 'Mscgen';
        }

        pre.src-ocaml:before {
            content: 'Objective Caml';
        }

        pre.src-octave:before {
            content: 'Octave';
        }

        pre.src-org:before {
            content: 'Org mode';
        }

        pre.src-oz:before {
            content: 'OZ';
        }

        pre.src-plantuml:before {
            content: 'Plantuml';
        }

        pre.src-processing:before {
            content: 'Processing.js';
        }

        pre.src-python:before {
            content: 'Python';
        }

        pre.src-R:before {
            content: 'R';
        }

        pre.src-ruby:before {
            content: 'Ruby';
        }

        pre.src-sass:before {
            content: 'Sass';
        }

        pre.src-scheme:before {
            content: 'Scheme';
        }

        pre.src-screen:before {
            content: 'Gnu Screen';
        }

        pre.src-sed:before {
            content: 'Sed';
        }

        pre.src-sh:before {
            content: 'shell';
        }

        pre.src-sql:before {
            content: 'SQL';
        }

        pre.src-sqlite:before {
            content: 'SQLite';
        }
        /* additional languages in org.el's org-babel-load-languages alist */
        pre.src-forth:before {
            content: 'Forth';
        }

        pre.src-io:before {
            content: 'IO';
        }

        pre.src-J:before {
            content: 'J';
        }

        pre.src-makefile:before {
            content: 'Makefile';
        }

        pre.src-maxima:before {
            content: 'Maxima';
        }

        pre.src-perl:before {
            content: 'Perl';
        }

        pre.src-picolisp:before {
            content: 'Pico Lisp';
        }

        pre.src-scala:before {
            content: 'Scala';
        }

        pre.src-shell:before {
            content: 'Shell Script';
        }

        pre.src-ebnf2ps:before {
            content: 'ebfn2ps';
        }
        /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
        pre.src-cpp:before {
            content: 'C++';
        }

        pre.src-abc:before {
            content: 'ABC';
        }

        pre.src-coq:before {
            content: 'Coq';
        }

        pre.src-groovy:before {
            content: 'Groovy';
        }
        /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
        pre.src-bash:before {
            content: 'bash';
        }

        pre.src-csh:before {
            content: 'csh';
        }

        pre.src-ash:before {
            content: 'ash';
        }

        pre.src-dash:before {
            content: 'dash';
        }

        pre.src-ksh:before {
            content: 'ksh';
        }

        pre.src-mksh:before {
            content: 'mksh';
        }

        pre.src-posh:before {
            content: 'posh';
        }
        /* Additional Emacs modes also supported by the LaTeX listings package */
        pre.src-ada:before {
            content: 'Ada';
        }

        pre.src-asm:before {
            content: 'Assembler';
        }

        pre.src-caml:before {
            content: 'Caml';
        }

        pre.src-delphi:before {
            content: 'Delphi';
        }

        pre.src-html:before {
            content: 'HTML';
        }

        pre.src-idl:before {
            content: 'IDL';
        }

        pre.src-mercury:before {
            content: 'Mercury';
        }

        pre.src-metapost:before {
            content: 'MetaPost';
        }

        pre.src-modula-2:before {
            content: 'Modula-2';
        }

        pre.src-pascal:before {
            content: 'Pascal';
        }

        pre.src-ps:before {
            content: 'PostScript';
        }

        pre.src-prolog:before {
            content: 'Prolog';
        }

        pre.src-simula:before {
            content: 'Simula';
        }

        pre.src-tcl:before {
            content: 'tcl';
        }

        pre.src-tex:before {
            content: 'TeX';
        }

        pre.src-plain-tex:before {
            content: 'Plain TeX';
        }

        pre.src-verilog:before {
            content: 'Verilog';
        }

        pre.src-vhdl:before {
            content: 'VHDL';
        }

        pre.src-xml:before {
            content: 'XML';
        }

        pre.src-nxml:before {
            content: 'XML';
        }
        /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
        pre.src-conf:before {
            content: 'Configuration File';
        }

    table {
        border-collapse: collapse;
    }

    caption.t-above {
        caption-side: top;
    }

    caption.t-bottom {
        caption-side: bottom;
    }

    td, th {
        vertical-align: top;
    }

        th.org-right {
            text-align: center;
        }

        th.org-left {
            text-align: center;
        }

        th.org-center {
            text-align: center;
        }

        td.org-right {
            text-align: right;
        }

        td.org-left {
            text-align: left;
        }

        td.org-center {
            text-align: center;
        }

    dt {
        font-weight: bold;
    }

    .footpara {
        display: inline;
    }

    .footdef {
        margin-bottom: 1em;
    }

    .figure {
        padding: 1em;
    }

        .figure p {
            text-align: center;
        }

    .equation-container {
        display: table;
        text-align: center;
        width: 100%;
    }

    .equation {
        vertical-align: middle;
    }

    .equation-label {
        display: table-cell;
        text-align: right;
        vertical-align: middle;
    }

    .inlinetask {
        padding: 10px;
        border: 2px solid gray;
        margin: 10px;
        background: #ffffcc;
    }

    #org-div-home-and-up {
        text-align: right;
        font-size: 70%;
        white-space: nowrap;
    }

    textarea {
        overflow-x: auto;
    }

    .linenr {
        font-size: smaller
    }

    .code-highlighted {
        background-color: #ffff00;
    }

    .org-info-js_info-navigation {
        border-style: none;
    }

    #org-info-js_console-label {
        font-size: 10px;
        font-weight: bold;
        white-space: nowrap;
    }

    .org-info-js_search-highlight {
        background-color: #ffff00;
        color: #000000;
        font-weight: bold;
    }

    .org-svg {
        width: 90%;
    }
    /*]]>*/ -->
</style>

<div id="content">
    <div id="table-of-contents">
        <h2>Table of Contents</h2>
        <div id="text-table-of-contents">
            <ul>
                <li><a href="#org1a95400">1. Overview</a></li>
                <li>
                    <br />
                    <a href="#org62775f3">2. Supported Featureset:</a>
                    <ul>
                        <li><a href="#org6e8944e">2.1. Parser</a></li>
                        <li><a href="#org486c540">2.2. Interpreter</a></li>
                        <li><a href="#org40339ca">2.3. Compiler</a></li>
                    </ul>
                </li>
                <li><a href="#org98a0c99">3. Grammar</a></li>
                <li>
                    <a href="#org47f0c3a">4. Compiler</a>
                    <ul>
                        <li>
                            <a href="#org8d97c11">4.1. Execution environment</a>
                            <ul>
                                <li><a href="#orgacd9a6a">4.1.1. Stack</a></li>
                                <li><a href="#org5383bdd">4.1.2. Simulated Registers</a></li>
                                <li><a href="#org1180e2f">4.1.3. Our Instructionpointer</a></li>
                            </ul>
                        </li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>

    <div id="outline-container-org1a95400" class="outline-2">
        <h2 id="org1a95400"><span class="section-number-2">1</span> Overview</h2>
        <div class="outline-text-2" id="text-1">
            <p>
                This is a purely academic project to explore context free grammars and compilers based on the theoretical MIMA-Machine.
            </p>

            <p>
                We use a recursive decent parser to parse a subset of the C programming language.
                The parsed output can then either be interpreted or compiled to MIMA-Assembly<a href="#org1180e2f">*</a>.
            </p>

            <p>
                You can try it yourself here: <a href="https://bertilbraun.github.io/mima-c/">https://bertilbraun.github.io/mima-c/</a>
            </p>
        </div>
    </div>

    <div id="outline-container-org62775f3" class="outline-2">
        <h2 id="org62775f3"><span class="section-number-2">2</span> Supported Featureset:</h2>
        <div class="outline-text-2" id="text-2">
        </div>
        <div id="outline-container-org6e8944e" class="outline-3">
            <h3 id="org6e8944e"><span class="section-number-3">2.1</span> Parser</h3>
            <div class="outline-text-3" id="text-2-1">
                <ul class="org-ul">
                    <li>while, for loop</li>
                    <li>conditionals (if else)</li>
                    <li>tenary operator</li>
                    <li>IO printf function</li>
                    <li>return</li>
                    <li>break</li>
                    <li>continue</li>
                    <li>boolean operators</li>
                    <li>arithmetic operators</li>
                    <li>variables, arrays</li>
                    <li>stringliterals</li>
                    <li>charliterals</li>
                    <li>pointers</li>
                    <li>typedefs</li>
                </ul>
            </div>
        </div>

        <div id="outline-container-org486c540" class="outline-3">
            <h3 id="org486c540"><span class="section-number-3">2.2</span> Interpreter</h3>
            <div class="outline-text-3" id="text-2-2">
                <p>
                    The Interpreter can execute anything that can be parsed.
                </p>
            </div>
        </div>

        <div id="outline-container-org40339ca" class="outline-3">
            <h3 id="org40339ca"><span class="section-number-3">2.3</span> Compiler</h3>
            <div class="outline-text-3" id="text-2-3">
                <ul class="org-ul">
                    <li>while, for loops</li>
                    <li>conditionals (if else)</li>
                    <li>tenary operator</li>
                    <li>
                        some arithmetic expressions
                        <ul class="org-ul">
                            <li>(+), (+=)</li>
                        </ul>
                    </li>
                    <li>printf (somewhat)</li>
                    <li>functions (recursion)</li>
                    <li>return</li>
                    <li>variables</li>
                </ul>
            </div>
        </div>
    </div>

    <div id="outline-container-org98a0c99" class="outline-2">
        <h2 id="org98a0c99"><span class="section-number-2">3</span> Grammar</h2>
        <div class="outline-text-2" id="text-3">
            <p>
                This grammar is (mostly) a LL(2) grammar.
            </p>

            <p>
                With the exception that we evaluate types and scope during parsing to differentiate between identifier and type tokens (to avoid lookahead).
            </p>

<pre class="example">
expr           -&gt; assignment | opassignment
;; this is ok to do recursively because it is right associative
opassignment   -&gt; ternary (STAREQ | DIVIDEEQ | MODEQ | MINUSEQ | PLUSEQ) assignment
assignment     -&gt; ternary (EQUALS assigmnet)*
ternary        -&gt; p9 (QUESTIONMARK expr COLON expr)?
p9             -&gt; (p8 AND)* p8
p8             -&gt; (p7 OR)* p7
p7             -&gt; (p6 (EQUAL | NEQ))* p6
p6             -&gt; (p4 (LT | GT | GEQ | LEQ)* p4)
p4             -&gt; (p3 (PLUS | MINUS))* p3
p3             -&gt; (unary (STAR | DIVIDE | MOD))* unary
unary          -&gt; (cast | STAR | AMPERSAND | NOT | LNOT) unary | (PLUSPLUS | MINUSMINUS | MINUS | PLUS)? postfix
cast           -&gt; LPAREN type RPAREN
postfix        -&gt; value (PLUSPLUS | MINUSMINUS | ((DOT | ARROW) value))?
value          -&gt; INTLITERAL | LPAREN expr RPAREN | functioncall | IDENTIFIER | arraylit | arrayaccess
functioncall   -&gt; IDENTIFIER LPAREN (RPAREN | expr (COMMA expr)* RPAREN)
arrayaccess    -&gt; IDENTIFIER LBRACKET expr RBRACKET
arraylit       -&gt; LBRACE (RBRACE | expr (, expr)* RBRACE)
</pre>

<pre class="example">
;; declaration    -&gt; type IDENTIFIER (LBRACKET expr RBRACKET)? | funcptr
;; funcptr        -&gt; type LPAREN STAR IDENTIFIER RPAREN LPAREN (type (LBRACKET RBRACKET)? (COMMA type (LBRACKET RBRACKET)?)*)? RPAREN
type           -&gt; (UNSIGNED | STRUCT | CONST)* (One of the defined Types :P )
</pre>

<pre class="example">
blockstatement -&gt; ((vardecl | expr | return | break | continue | instrinsic | typedef | structdecl)? SEMICOLON | block | for | while | if)
for            -&gt; FOR LPAREN (vardecl | expr) SEMICOLON expr SEMICOLON expr RPAREN blockstatement
while          -&gt; WHILE LPAREN expr RPAREN blockstatement
if             -&gt; IF LPAREN expr RPAREN blockstatement (ELSE blockstatement)?
block          -&gt; LBRACE (blockstatment)* RBRACE
return         -&gt; RETURN (expr)? SEMICOLON
break          -&gt; BREAK SEMICOLON
continue       -&gt; CONTINUE SEMICOLON
intrinsic      -&gt; INTRINSIC LPAREN (RPAREN | expr (COMMA expr)* RPAREN)
</pre>

<pre class="example">
program        -&gt; (statement)*
statement      -&gt; ((vardecl | funcdecl | structdecl | typedef)? SEMICOLON)
typedef        -&gt; TYPEDEF (type | structdecl) IDENTIFIER
structdecl     -&gt; STRUCT IDENTIFIER? LBRACE (vardecl SEMICOLON)* RBRACE
vardecl        -&gt; type vardecl' (, vardecl')*
vardecl'       -&gt; STAR* IDENTIFIER (LBRACKET (expr)? RBRACKET)? (= expr)?
funcdecl       -&gt; type IDENTIFIER LPAREN (RPAREN | funcdecl' (COMMA funcdecl')* RPAREN) (SEMICOLON | block)
funcdecl'      -&gt; type IDENTIFIER (LBRACKET RBRACKET)?
</pre>
        </div>
    </div>

    <div id="outline-container-org47f0c3a" class="outline-2">
        <h2 id="org47f0c3a"><span class="section-number-2">4</span> Compiler</h2>
        <div class="outline-text-2" id="text-4">
        </div>
        <div id="outline-container-org8d97c11" class="outline-3">
            <h3 id="org8d97c11"><span class="section-number-3">4.1</span> Execution environment</h3>
            <div class="outline-text-3" id="text-4-1">
            </div>
            <div id="outline-container-orgacd9a6a" class="outline-4">
                <h4 id="orgacd9a6a"><span class="section-number-4">4.1.1</span> Stack</h4>
                <div class="outline-text-4" id="text-4-1-1">
                    <p>
                        The stack starts at 1 and grows upwards.
                    </p>
                </div>
            </div>
            <div id="outline-container-org5383bdd" class="outline-4">
                <h4 id="org5383bdd"><span class="section-number-4">4.1.2</span> Simulated Registers</h4>
                <div class="outline-text-4" id="text-4-1-2">
                    <p>
                        Some memory addresses are reserved to be used as registers by the compiler.
                    </p>

                    <table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


                        <colgroup>
                            <col class="org-left" />

                            <col class="org-right" />
                        </colgroup>
                        <thead>
                            <tr>
                                <td scope="col" class="org-left">StackPointerPosition</td>
                                <td scope="col" class="org-right">1048504</td>
                            </tr>

                            <tr>
                                <td scope="col" class="org-left">FramePointerPosition</td>
                                <td scope="col" class="org-right">1048508</td>
                            </tr>

                            <tr>
                                <td scope="col" class="org-left">LastAddrPointerPosition</td>
                                <td scope="col" class="org-right">1048512</td>
                            </tr>

                            <tr>
                                <td scope="col" class="org-left">PushPopPointerPosition</td>
                                <td scope="col" class="org-right">1048516</td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td class="org-left">General Purpose registers</td>
                                <td class="org-right">1048520</td>
                            </tr>

                            <tr>
                                <td class="org-left">&#xa0;</td>
                                <td class="org-right">1048524</td>
                            </tr>

                            <tr>
                                <td class="org-left">&#xa0;</td>
                                <td class="org-right">1048528</td>
                            </tr>

                            <tr>
                                <td class="org-left">&#xa0;</td>
                                <td class="org-right">1048532</td>
                            </tr>

                            <tr>
                                <td class="org-left">&#xa0;</td>
                                <td class="org-right">1048536</td>
                            </tr>

                            <tr>
                                <td class="org-left">&#xa0;</td>
                                <td class="org-right">1048540</td>
                            </tr>

                            <tr>
                                <td class="org-left">&#xa0;</td>
                                <td class="org-right">1048544</td>
                            </tr>

                            <tr>
                                <td class="org-left">&#xa0;</td>
                                <td class="org-right">1048548</td>
                            </tr>
                        </tbody>
                        <tbody>
                            <tr>
                                <td class="org-left">Return Register Positions</td>
                                <td class="org-right">1048552</td>
                            </tr>

                            <tr>
                                <td class="org-left">&#xa0;</td>
                                <td class="org-right">1048556</td>
                            </tr>
                        </tbody>
                        <tbody>
                            <tr>
                                <td class="org-left">InstructionPointer</td>
                                <td class="org-right">1048500</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <br />
            <div id="outline-container-org1180e2f" class="outline-4">
                <h4 id="org1180e2f"><span class="section-number-4">4.1.3</span> Our Instructionpointer</h4>
                <div class="outline-text-4" id="text-4-1-3">
                    <p>
                        We don&rsquo;t assemble to bytecode.
                        The Mima assembly Interpreter we use will use the InstructionPointer memory location as an instruction pointer thus allowing for direct reading of that value.
                    </p>

                    <p>
                        This makes it trivial to push the current instruction pointer to the stack even without resolving that address in the assembler.
                    </p>

                    <p>
                        In the future we might assemble to proper MIMA bytecode and then this step will not be necessary anymore.
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    protected override void OnInitialized()
    {
        JS.InvokeVoidAsync("removeEditor");
        base.OnInitialized();
    }
}