@page "/ccompiler"
@inject IJSRuntime JS
@using mima_c;
@using mima_c.compiler;
@using System.IO;

<h1>C Compiler</h1>

<textarea autofocus id="CodeInputField">int main() {
    int a = 5;
    printf(a);
    return a;
}    
</textarea>

<div class="outputRow">
    <div class="outputCol">
        <h3>Compiled Code</h3>
        <textarea class="outputElement" @bind="@outputText" id="CompiledOutput" readonly> </textarea>
    </div>
    <div class="outputCol">
        <h3>Compilation Output</h3>
        <textarea class="outputElement" @bind="@consoleOutput" id="ConsoleOutput" readonly> </textarea>
    </div>
</div>
<button class="btn btn-primary" @onclick="Compile">Compile</button>
<NavLink class="btn btn-primary" href="/mima-c/mimainterpreter"  style="@IsDisabledStyle">Go to Run</NavLink>

@functions {
    string IsDisabledStyle { get; set; } = "display: none;";

    string outputText = "";
    string consoleOutput = "";

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            JS.InvokeVoidAsync("createEditor", "CodeInputField", "text/x-csrc");
        base.OnAfterRender(firstRender);
    }

    private async Task WriteLine(string line)
    {
        consoleOutput += line + "\n";
        Console.WriteLine(line);
        await ShowOutput();
    }

    private async Task ShowOutput()
    {
        await JS.InvokeVoidAsync("scrollToBottom", "CompiledOutput");
        await JS.InvokeVoidAsync("scrollToBottom", "ConsoleOutput");

        await InvokeAsync(StateHasChanged);
        await Task.Delay(1);
    }

    private async void Compile()
    {
        bool showOutput = true;

        string inputText = await JS.InvokeAsync<string>("getEditorValue", "CodeInputField");

        outputText = "";
        consoleOutput = "";

        try
        {
            string preprozessedText = new PreProzessor(inputText).GetProcessedText();
            if (showOutput)
            {
                await WriteLine("Preprozessing Done");
                await WriteLine(preprozessedText);
            }

            TokenStream tokenStream = new Lexer(preprozessedText).GetTokenStream();
            if (showOutput)
                await WriteLine("Lexing Done");

            mima_c.ast.Program ast = new CParser(tokenStream).Parse();
            if (showOutput)
            {
                await WriteLine("Parsing Done");
                await WriteLine("--------------------- :AST: ---------------------");
                await WriteLine(ast.ToString());
                await WriteLine("-------------------------------------------------");
            }

            PreCompiler.PreCompiledAST preCompiled = new PreCompiler().PreComile(ast);
            if (showOutput)
            {
                await WriteLine("Pre Compilation Done");
                await WriteLine("--------------------- :AST: ---------------------");
                await WriteLine(preCompiled.Program.ToString());
                await WriteLine("------------------ :FUNCTIONS: ------------------");
                foreach (var func in preCompiled.Functions)
                    await WriteLine(func.ToString());
                await WriteLine("-------------------------------------------------");
            }

            Compiler.Runnable compiled = new Compiler("output.mima").Compile(preCompiled);
            if (showOutput)
                await WriteLine("Compilation Done");

            if (compiled == null)
            {
                IsDisabledStyle = "display: none;";
                return;
            }

            IsDisabledStyle = "display: inline-block;";
            outputText = File.ReadAllText(compiled.fileName);
            await ShowOutput();
        }
        catch (Exception e)
        {
            IsDisabledStyle = "display: none;";
            await WriteLine("");
            await WriteLine("Compilation Error:");
            await WriteLine(e.Message);
        }
    }
}
