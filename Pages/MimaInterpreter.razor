@page "/mimainterpreter"
@inject IJSRuntime JS
@using MiMa.interpreter;
@using System.Diagnostics;
@using System.IO;

<h1>Mima Interpreter</h1>

<div class="outputRow">
    <div class="outputCol">
        <h3>MiMa Code</h3>
        <textarea autofocus id="CodeInputField">    ldc 1
    stv 1
inc:
    add 1
    printakku
    jmp inc</textarea>
    </div>
    <div class="outputCol">
        <h3>Output</h3>
        <textarea class="outputElement" @bind="@Output" id="OutputElement" readonly> </textarea>
    </div>
</div>

<button class="btn btn-primary" @onclick="Stop">Stop</button>
<button class="btn btn-primary" @onclick="Run">Run</button>

@code {
    string fileName = "output.mima";
    string Output = "";
    bool stopRun = false;
    bool shouldUpdateOutput = false;

    private void WriteLine(string line)
    {
        Output += line + "\n";
        Console.WriteLine(line);
        shouldUpdateOutput = true;
    }

    private void Stop()
    {
        stopRun = true;
    }

    private async void Run()
    {
        string inputText = await JS.InvokeAsync<string>("getEditorValue", "CodeInputField");

        File.WriteAllText(fileName, inputText);

        Output = "";
        WriteLine("Now Running Program " + fileName);

        List<Instruction> instructions = new InstructionParser().Parse(fileName);

        if (instructions == null)
            return;

        Mima mima = new Mima(instructions, WriteLine);

        Stopwatch stopwatch = Stopwatch.StartNew();

        stopRun = false;

        while (mima.CanStep() && !stopRun)
        {
            mima.Step();
            if (shouldUpdateOutput)
            {
                shouldUpdateOutput = false;
                await JS.InvokeVoidAsync("scrollToBottom", "OutputElement");
                await InvokeAsync(StateHasChanged);
                await Task.Delay(1);
            }
        }

        WriteLine("");
        WriteLine("Done!");
        WriteLine("Elapsed time: " + stopwatch.Elapsed.TotalSeconds + "s");
        await InvokeAsync(StateHasChanged);
        await Task.Delay(1);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JS.InvokeVoidAsync("createEditor", "CodeInputField", "text/mima");

            if (File.Exists(fileName))
            {
                string input = File.ReadAllText(fileName);
                if (input != "")
                    JS.InvokeVoidAsync("setEditorValue", "CodeInputField", input);
            }
        }
        base.OnAfterRender(firstRender);
    }
}